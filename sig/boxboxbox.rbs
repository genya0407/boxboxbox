module Boxboxbox
end

class Boxboxbox::Image
  attr_reader name: String
  attr_reader binary: String

  def initialize: (name: String, binary: String) -> untyped
end

class Boxboxbox::Point
  attr_reader x: Float
  attr_reader y: Float

  def initialize: (x: Float x, y: Float y) -> untyped
end

class Boxboxbox::Box
  attr_reader image_name: String
  attr_reader top_left: Point
  attr_reader bottom_right: Point

  def initialize: (image_name: String, top_left: Point, bottom_right: Point) -> untyped
end

class Boxboxbox::Unzipper
  def unzip: (zip_path: Pathname) -> _Each[Boxboxbox::Image, nil]
end

Boxboxbox::Unzipper::TARGET_EXTENSION_REGEX: Regexp

class Zip::File
  def self.open: (Pathname) { (Zip::File) -> void } -> void
  def each: () { (Zip::Entry) -> void } -> void
end

class Zip::Entry
  def name: -> String
  def extract: -> void
  def get_input_stream: -> IO
end
